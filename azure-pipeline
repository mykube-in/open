"name": "[format('{0}/{1}', parameters('dbServerName'), parameters('databaseName'))]"
https://gist.github.com/PrakashRajanSakthivel/17cca682ec0aba049561975142e828f7



              - task: PowerShell@2
                inputs:
                    targetType: 'inline'
                    script: |
                      # Write your PowerShell commands here.
                      
                      Get-ChildItem $(system.defaultworkingdirectory) -Recurse

              - task: PowerShell@2
                inputs:
                    targetType: 'inline'
                    script: |
                      # Write your PowerShell commands here.
                      
                      pwd






ARM TEMPLATE FUNCTIONS:
https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-functions
https://gist.github.com/christopheranderson/ec6ab6b1eae152fca5321f4044b33d1d ----funtionapp template



https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&tabs=yaml#limit-job-authorization-scope
Behavior of triggers when new branches are created: Here is the behavior when you push a new branch (that matches the branch filters) to your repository:

If your pipeline has path filters, it will be triggered only if the new branch has changes to files that match that path filter.
If your pipeline does not have path filters, it will be triggered even if there are no changes in the new branch.



Deployment and Job:
Job and stage names cannot contain keywords (example: deployment).
Each job in a stage must have a unique name
A deployment job and a traditional job can exist in the same stage.
A deployment job doesn't automatically clone the source repo. You can checkout the source repo within your job with checkout: self. Deployment jobs only support one checkout step.

TraditionalJob - then you have to manually download the artifact, where as it happens automaticlly in Deployment.  
          - task: DownloadBuildArtifacts@0
            displayName: 'download the artifact'
            inputs:
              buildType: 'current'
              artifactName: 'Drop'
              downloadPath: '$(System.ArtifactsDirectory)'
By default, files are downloaded to $(Pipeline.Workspace). If an artifact name was not specified, a subdirectory will be created for each downloaded artifact.

Deployment:
  - stage: 'postprdApproval'
    dependsOn: prdDeployStage
    condition: and(succeeded('prdDeployStage'), contains(variables['Build.SourceBranch'],'refs/heads/release/'))
    displayName: 'post-prd-Approval'
    jobs: 
      - deployment: postprdApproval
        environment: prd-post
        displayName: 'post-prd-Approval'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none # setting to none to avoid downloading the artifact.
Note: Deleting a pipeline run will result in the deletion of all Artifacts associated with that run.

























INTEGRATION ACCOUNT:
--------------------
https://docs.microsoft.com/en-us/azure/logic-apps/logic-apps-enterprise-integration-create-integration-account?tabs=azure-cli
https://biztalktechie.com/integration-magic-end-to-end-scenario/ (good website for logic app biztalktechie.com you can pick example schema maps for pratical)
Potral Search > Integration Account (to create and manage integration account)
MAPS in integration account are of type XSLT and Liquid. (We used liquid in project). Liquid map can be json and XML map. 
Now you can open Logic APP > Workflow settings > Integration Account dropdown and select your logic APP.This will connected you logic app and Integration account. 



amit@host:~$ az logic integration-account show --name name-of-ia --resource-group rg-name
Command group 'logic' is in preview and under development. Reference and support levels: https://aka.ms/CLI_refstatus
{
  "id": "/subscriptions/XXXXXXXXXXXXXXXXXXXXX/resourceGroups/rg-name/providers/Microsoft.Logic/integrationAccounts/name-of-ia",
  "integrationServiceEnvironment": null,
  "location": "eastus",
  "name": "name-of-ia",
  "resourceGroup": "rg-name",
  "sku": {
    "name": "Basic"
  },
  "state": "Enabled",
  "tags": {},
  "type": "Microsoft.Logic/integrationAccounts"
}
amit@Azure:~$

LOGIC APP and LOGIC APP Standard:
Logic APP need integration account , where as Standard LOGIC APP does not need integration account.
LOGIC APP can have one workflow , where as  single Logic App (infra), which contains multiple workflows (app).
Note: Initially when we started project we have number of logic app consumption as there were number of apps for ibound and bound connections , when we decid to use stadard logic app We created only one logic app with all the workflows in it.
The Consumption resource type runs in the multi-tenant Azure Logic Apps or integration service environment, while the Standard resource type runs in single-tenant Azure Logic Apps environment.A single Standard logic app can have multiple stateful and stateless workflows.



